//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WordleWebApp.WordleLogicServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidResponse", Namespace="http://schemas.datacontract.org/2004/07/WordleLogicServiceApplication")]
    [System.SerializableAttribute()]
    public partial class ValidResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isValidWordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isValidWord {
            get {
                return this.isValidWordField;
            }
            set {
                if ((this.isValidWordField.Equals(value) != true)) {
                    this.isValidWordField = value;
                    this.RaisePropertyChanged("isValidWord");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WordLetter", Namespace="http://schemas.datacontract.org/2004/07/WordleLogicServiceApplication")]
    [System.SerializableAttribute()]
    public partial class WordLetter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char LetterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WordleWebApp.WordleLogicServiceReference.WordLetter.LetterStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Letter {
            get {
                return this.LetterField;
            }
            set {
                if ((this.LetterField.Equals(value) != true)) {
                    this.LetterField = value;
                    this.RaisePropertyChanged("Letter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WordleWebApp.WordleLogicServiceReference.WordLetter.LetterStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="WordLetter.LetterStatus", Namespace="http://schemas.datacontract.org/2004/07/WordleLogicServiceApplication")]
        public enum LetterStatus : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Unknown = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CorrectLetter = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CorrectLetterWrongSpot = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            IncorrectLetter = 3,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WordleLogicServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateWord", ReplyAction="http://tempuri.org/IService1/GenerateWordResponse")]
        string GenerateWord(string gameWordsXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateWord", ReplyAction="http://tempuri.org/IService1/GenerateWordResponse")]
        System.Threading.Tasks.Task<string> GenerateWordAsync(string gameWordsXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsValidGuess", ReplyAction="http://tempuri.org/IService1/IsValidGuessResponse")]
        WordleWebApp.WordleLogicServiceReference.ValidResponse IsValidGuess(string wordsXML, string guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsValidGuess", ReplyAction="http://tempuri.org/IService1/IsValidGuessResponse")]
        System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.ValidResponse> IsValidGuessAsync(string wordsXML, string guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordGuessChecker", ReplyAction="http://tempuri.org/IService1/WordGuessCheckerResponse")]
        WordleWebApp.WordleLogicServiceReference.WordLetter[] WordGuessChecker(string userGuess, string actualWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WordGuessChecker", ReplyAction="http://tempuri.org/IService1/WordGuessCheckerResponse")]
        System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.WordLetter[]> WordGuessCheckerAsync(string userGuess, string actualWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertToDisplay", ReplyAction="http://tempuri.org/IService1/ConvertToDisplayResponse")]
        WordleWebApp.WordleLogicServiceReference.WordLetter[] ConvertToDisplay(WordleWebApp.WordleLogicServiceReference.WordLetter[] guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertToDisplay", ReplyAction="http://tempuri.org/IService1/ConvertToDisplayResponse")]
        System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.WordLetter[]> ConvertToDisplayAsync(WordleWebApp.WordleLogicServiceReference.WordLetter[] guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHint", ReplyAction="http://tempuri.org/IService1/GetHintResponse")]
        string GetHint(string actualWord, int[] revealedPositions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHint", ReplyAction="http://tempuri.org/IService1/GetHintResponse")]
        System.Threading.Tasks.Task<string> GetHintAsync(string actualWord, int[] revealedPositions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveWordToList", ReplyAction="http://tempuri.org/IService1/SaveWordToListResponse")]
        string SaveWordToList(string existingWordXML, string wordToAdd, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveWordToList", ReplyAction="http://tempuri.org/IService1/SaveWordToListResponse")]
        System.Threading.Tasks.Task<string> SaveWordToListAsync(string existingWordXML, string wordToAdd, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WordleWebApp.WordleLogicServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WordleWebApp.WordleLogicServiceReference.IService1>, WordleWebApp.WordleLogicServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GenerateWord(string gameWordsXML) {
            return base.Channel.GenerateWord(gameWordsXML);
        }
        
        public System.Threading.Tasks.Task<string> GenerateWordAsync(string gameWordsXML) {
            return base.Channel.GenerateWordAsync(gameWordsXML);
        }
        
        public WordleWebApp.WordleLogicServiceReference.ValidResponse IsValidGuess(string wordsXML, string guess) {
            return base.Channel.IsValidGuess(wordsXML, guess);
        }
        
        public System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.ValidResponse> IsValidGuessAsync(string wordsXML, string guess) {
            return base.Channel.IsValidGuessAsync(wordsXML, guess);
        }
        
        public WordleWebApp.WordleLogicServiceReference.WordLetter[] WordGuessChecker(string userGuess, string actualWord) {
            return base.Channel.WordGuessChecker(userGuess, actualWord);
        }
        
        public System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.WordLetter[]> WordGuessCheckerAsync(string userGuess, string actualWord) {
            return base.Channel.WordGuessCheckerAsync(userGuess, actualWord);
        }
        
        public WordleWebApp.WordleLogicServiceReference.WordLetter[] ConvertToDisplay(WordleWebApp.WordleLogicServiceReference.WordLetter[] guess) {
            return base.Channel.ConvertToDisplay(guess);
        }
        
        public System.Threading.Tasks.Task<WordleWebApp.WordleLogicServiceReference.WordLetter[]> ConvertToDisplayAsync(WordleWebApp.WordleLogicServiceReference.WordLetter[] guess) {
            return base.Channel.ConvertToDisplayAsync(guess);
        }
        
        public string GetHint(string actualWord, int[] revealedPositions) {
            return base.Channel.GetHint(actualWord, revealedPositions);
        }
        
        public System.Threading.Tasks.Task<string> GetHintAsync(string actualWord, int[] revealedPositions) {
            return base.Channel.GetHintAsync(actualWord, revealedPositions);
        }
        
        public string SaveWordToList(string existingWordXML, string wordToAdd, string username) {
            return base.Channel.SaveWordToList(existingWordXML, wordToAdd, username);
        }
        
        public System.Threading.Tasks.Task<string> SaveWordToListAsync(string existingWordXML, string wordToAdd, string username) {
            return base.Channel.SaveWordToListAsync(existingWordXML, wordToAdd, username);
        }
    }
}
